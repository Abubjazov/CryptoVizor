{"version":3,"sources":["interfaces/TCoin.ts","components/AppMenu/AppMenu.tsx","components/AppMenu/index.ts","components/InputGroup/InputGroup.tsx","components/InputGroup/index.ts","store/CoinsStore.ts","store/RateExchangerStore.ts","store/RootStore.ts","store/useStores.ts","components/RateExchanger/RateExchanger.tsx","components/RateExchanger/index.ts","components/RateExchanger/hooks.ts","components/CryptoTable/CryptoTable.tsx","components/CryptoTable/index.ts","components/CryptoTable/hooks.ts","components/CryptoCurrency/index.ts","components/CryptoCurrency/CryptoCurrency.tsx","components/CryptoCurrency/hooks.ts","App/index.ts","App/App.tsx","index.tsx"],"names":["EStatus","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","spacing","title","toolbar","marginTop","background","AppMenu","classes","Fade","in","timeout","AppBar","position","elevation","className","Toolbar","IconButton","edge","color","aria-label","Typography","variant","Button","inputGroup","height","display","justifyContent","alignItems","input","width","formControl","selectEmpty","coinWrapper","InputGroup","coins","selectValue","setSelectValue","inputValue","setInputValue","readOnly","TextField","id","type","label","value","onChange","event","parseFloat","target","inputProps","step","min","InputProps","FormControl","InputLabel","Select","labelId","fullWidth","map","row","MenuItem","key","src","process","imageUrl","alt","style","fullName","CoinsStore","_coins","_status","WAITING","setStatusWaiting","setCoins","loadCoinsData","LOADING","Axios","get","then","response","data","Data","coin","obj","name","price","volume24Hour","Changepcthour","CoinInfo","Id","Name","FullName","ImageUrl","RAW","USD","PRICE","VOLUME24HOUR","CHANGEPCTHOUR","catch","ERROR","makeAutoObservable","this","RateExchangerStore","_selectValue1","_inputValue1","_selectValue2","_inputValue2","setFirstCoin","setFirstValue","setSecondCoin","setSecondValue","coinsStore","rateExchangerStore","RootContext","createContext","useStores","useContext","rateContainer","gridAutoColumns","gridAutoRows","iconButton","justifySelf","RateExchanger","useObserver","useCoinsStore","firstCoin","firstValue","secondCoin","secondValue","useRateExchangerStore","useEffect","fValue","fId","sId","fPrice","filter","item","sPrice","multiplier","toFixed","exchange","Paper","padding","onClick","tmpCoin","tableContainer","tableHead","palette","primary","main","backgroundColor","colorСellGreen","colorСellRed","CryptoTable","tableRowClickHandler","elementId","currentTarget","dataset","TableContainer","component","Table","TableHead","TableRow","TableCell","align","size","TableBody","data-id","hover","role","tabIndex","scope","Math","round","CryptoCurrency","status","useState","time","setTime","timer","setTimeout","clearTimeout","paddingTop","marginLeft","App","createTheme","purple","secondary","grey","ThemeProvider","Container","maxWidth","Grid","container","xs","md","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6IAUYA,E,mJCENC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,SAAU,GAEZC,WAAY,CACVC,YAAaJ,EAAMK,QAAQ,IAE7BC,MAAO,CACLJ,SAAU,GAEZK,QAAS,CACPC,UAAW,MACXC,WAAY,eCtBDC,ED0BK,WAClB,IAAMC,EAAUb,IAEhB,OACE,kBAACc,EAAA,EAAD,CAAMC,IAAE,EAACC,QAAS,KAChB,kBAACC,EAAA,EAAD,CAAQC,SAAS,SAASC,UAAW,EAAGC,UAAWP,EAAQJ,SACzD,kBAACY,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,KAAK,QACLH,UAAWP,EAAQR,WACnBmB,MAAM,UACNC,aAAW,QAEX,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CAAYF,MAAM,UAAUG,QAAQ,KAAKP,UAAWP,EAAQL,OAA5D,eAGA,kBAACoB,EAAA,EAAD,CAAQJ,MAAM,WAAd,a,uEElCJxB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvC2B,WAAY,CACVC,OAAQ,OACRC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,YAEdC,MAAO,CAAEC,MAAO,OAChBC,YAAa,CACXD,MAAO,OAETE,YAAa,CACX3B,UAAWR,EAAMK,QAAQ,IAE3B+B,YAAa,CACXP,QAAS,OACTE,WAAY,cC1BDM,EDuCyB,SAAC,GAOlC,IANLC,EAMI,EANJA,MACAC,EAKI,EALJA,YACAC,EAII,EAJJA,eACAC,EAGI,EAHJA,WACAC,EAEI,EAFJA,cAEI,IADJC,gBACI,SACEhC,EAAUb,IAYhB,OACE,yBAAKoB,UAAWP,EAAQgB,YACtB,kBAACiB,EAAA,EAAD,CACEC,GAAG,cACHC,KAAK,SACLC,MAAM,iCACN7B,UAAWP,EAAQqB,MACnBgB,MAAOP,EACPQ,SAdoB,SAACC,GACzB,IAAMT,EAAaU,WAAWD,EAAME,OAAOJ,OAE3CN,EAAcD,IAYVY,WAAY,CAAEP,KAAM,SAAUQ,KAAM,MAAOC,IAAK,GAChDC,WAAY,CACVb,SAAUA,KAId,kBAACc,EAAA,EAAD,CAAavC,UAAWP,EAAQuB,aAC9B,kBAACwB,EAAA,EAAD,CAAYb,GAAG,gBAAf,wCACA,kBAACc,EAAA,EAAD,CACEC,QAAQ,eACRf,GAAG,eACHG,MAAOT,EACPU,SA/BmB,SAACC,GAC1BV,EAAeU,EAAME,OAAOJ,QA+BtBa,WAAS,GAERvB,GACCA,EAAMwB,KAAI,SAACC,GAAD,OACR,kBAACC,EAAA,EAAD,CAAUC,IAAKF,EAAIlB,GAAIG,MAAOe,EAAIlB,IAChC,yBAAK3B,UAAWP,EAAQyB,aACtB,yBACE8B,IAAKC,gCAAsCJ,EAAIK,SAC/CC,IAAI,GACJC,MAAO,CAAE1C,OAAQ,OAAQxB,YAAa,SAEvC2D,EAAIQ,kB,2DHpFX1E,K,kBAAAA,E,kBAAAA,E,eAAAA,M,SKuDG2E,E,WAxDb,aAAe,IAAD,gCAHdC,OAAyB,KAGX,KAFdC,QAAmB7E,EAAQ8E,QAEb,KAYdC,iBAAmB,WACjB,EAAKF,QAAU7E,EAAQ8E,SAbX,KAgBdE,SAAW,SAACvC,GACV,EAAKmC,OAASnC,GAjBF,KAoBdwC,cAAgB,WACd,EAAKJ,QAAU7E,EAAQkF,QAEvBC,IAAMC,IAAId,6EACPe,MAAK,SAACC,GACL,IAAM7C,EAAiB6C,EAASC,KAAKC,KAAKvB,KAAI,SAACwB,GAC7C,IAAMC,EAAa,CACjB1C,GAAI,GACJ2C,KAAM,GACNjB,SAAU,GACVH,SAAU,GACVqB,MAAO,EACPC,aAAc,EACdC,cAAe,GAWjB,OARAJ,EAAI1C,GAAKyC,EAAKM,SAASC,GACvBN,EAAIC,KAAOF,EAAKM,SAASE,KACzBP,EAAIhB,SAAWe,EAAKM,SAASG,SAC7BR,EAAInB,SAAWkB,EAAKM,SAASI,SAC7BT,EAAIE,MAAQH,EAAKW,IAAIC,IAAIC,MACzBZ,EAAIG,aAAeJ,EAAKW,IAAIC,IAAIE,aAChCb,EAAII,cAAgBL,EAAKW,IAAIC,IAAIG,cAE1Bd,KAGT,EAAKX,mBACL,EAAKC,SAASvC,MAEfgE,OAAM,WACL,EAAK5B,QAAU7E,EAAQ0G,UAlD3BC,YAAmBC,M,uCAGrB,WACE,OAAOA,KAAKhC,S,kBAGd,WACE,OAAOgC,KAAK/B,Y,KCsBDgC,E,WA/Bb,aAAe,IAAD,gCANNC,cAAwB,GAMlB,KALNC,aAAuB,EAKjB,KAHNC,cAAwB,GAGlB,KAFNC,aAAuB,EAEjB,KAUdC,aAAe,SAAC/D,GACd,EAAK2D,cAAgB3D,GAXT,KAadgE,cAAgB,SAAChE,GACf,EAAK4D,aAAe5D,GAdR,KAuBdiE,cAAgB,SAACjE,GACf,EAAK6D,cAAgB7D,GAxBT,KA0BdkE,eAAiB,SAAClE,GAChB,EAAK8D,aAAe9D,GA1BpBwD,YAAmBC,M,2CAGrB,WACE,OAAOA,KAAKE,gB,sBAEd,WACE,OAAOF,KAAKG,e,sBASd,WACE,OAAOH,KAAKI,gB,uBAEd,WACE,OAAOJ,KAAKK,iB,KCzBVK,EAAa,IAAI3C,EACjB4C,EAAqB,IAAIV,EAElBW,EAAcC,wBAAc,CACvCH,aACAC,uBCJaG,EAFG,kBAAMC,qBAAWH,ICU7BvH,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCyH,cAAe,CACb5F,QAAS,OACT6F,gBAAiB,MACjBC,aAAc,iBACd5F,WAAY,OAEd6F,WAAY,CACVC,YAAa,cCpBFC,EDwBW,WACxB,IAAMnH,EAAUb,IAERwC,EETmB,WAC3B,IAAQ6E,EAAeI,IAAfJ,WAER,OAAOY,aAAY,iBAAO,CACxBzF,MAAO6E,EAAW7E,UFKF0F,GAAV1F,MACR,EE1BmC,WACnC,IAAQ8E,EAAuBG,IAAvBH,mBAER,OAAOW,aAAY,iBAAO,CACxBE,UAAWb,EAAmBa,UAC9BC,WAAYd,EAAmBc,WAC/BnB,aAAcK,EAAmBL,aACjCC,cAAeI,EAAmBJ,cAElCmB,WAAYf,EAAmBe,WAC/BC,YAAahB,EAAmBgB,YAChCnB,cAAeG,EAAmBH,cAClCC,eAAgBE,EAAmBF,mBFwBjCmB,GATFJ,EADF,EACEA,UACAC,EAFF,EAEEA,WACAnB,EAHF,EAGEA,aACAC,EAJF,EAIEA,cAEAmB,EANF,EAMEA,WACAC,EAPF,EAOEA,YACAnB,EARF,EAQEA,cACAC,EATF,EASEA,eA+BF,OAJAoB,qBAAU,YAjBO,SACfhG,EACAiG,EACAC,EACAC,EACAvB,GAEA,GAAI5E,GAASkG,GAAOC,GACJ,OAAVnG,EAAgB,CAClB,IAAMoG,EAASpG,EAAMqG,QAAO,SAACC,GAAD,OAAUA,EAAK/F,KAAO2F,KAAK,GAAG/C,MACpDoD,EAASvG,EAAMqG,QAAO,SAACC,GAAD,OAAUA,EAAK/F,KAAO4F,KAAK,GAAGhD,MACpDqD,EAAa3F,YAAYuF,EAASG,GAAQE,QAAQ,IAExD7B,EAAe/D,YAAYoF,EAASO,GAAYC,QAAQ,MAK5DC,CAAS1G,EAAO4F,EAAYD,EAAWE,EAAYjB,KAClD,CAACe,EAAWC,EAAYC,EAAYC,IAGrC,kBAACxH,EAAA,EAAD,CAAMC,IAAE,EAACC,QAAS,KAChB,kBAACmI,EAAA,EAAD,CAAOhI,UAAW,EAAGqD,MAAO,CAAE1C,OAAQ,QAASsH,QAAS,SACtD,kBAAC1H,EAAA,EAAD,CAAYC,QAAQ,MAApB,sEACA,yBAAKP,UAAWP,EAAQ8G,eACtB,kBAAC,EAAD,CACEnF,MAAOA,EACPC,YAAa0F,EACbzF,eAAgBuE,EAChBtE,WAAYyF,EACZxF,cAAesE,IAEjB,kBAAC5F,EAAA,EAAD,CACEF,UAAWP,EAAQiH,WACnBtG,MAAM,UACNC,aAAW,SACX4H,QA5CuB,WAC/B,IAAMC,EAAUnB,EAEhBlB,EAAaoB,GACblB,EAAcmC,KA0CN,kBAAC,IAAD,OAEF,kBAAC,EAAD,CACE9G,MAAOA,EACPC,YAAa4F,EACb3F,eAAgByE,EAChBxE,WAAY2F,EACZ1F,cAAewE,EACfvE,UAAQ,Q,8DGjFd7C,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCqJ,eAAgB,CACd7I,UAAW,QAEb8I,UAAW,CACThI,MAAOtB,EAAMuJ,QAAQC,QAAQC,KAC7BC,gBAAiB,WAEnBtH,YAAa,CACXP,QAAS,OACTE,WAAY,UAEd4H,sBAAgB,CACdD,gBAAiB,WAEnBE,oBAAc,CACZF,gBAAiB,eC7BNG,GDqC2B,SAAC,GAAe,IAAbvH,EAAY,EAAZA,MACrC3B,EAAUb,KAEhB,EEtCmC,WACnC,IAAQsH,EAAuBG,IAAvBH,mBAER,OAAOW,aAAY,iBAAO,CACxBE,UAAWb,EAAmBa,UAC9BC,WAAYd,EAAmBc,WAC/BnB,aAAcK,EAAmBL,aACjCC,cAAeI,EAAmBJ,cAElCmB,WAAYf,EAAmBe,WAC/BC,YAAahB,EAAmBgB,YAChCnB,cAAeG,EAAmBH,cAClCC,eAAgBE,EAAmBF,mBF2BnCmB,GADMJ,EAAR,EAAQA,UAAWlB,EAAnB,EAAmBA,aAAcoB,EAAjC,EAAiCA,WAAYlB,EAA7C,EAA6CA,cAYvC6C,EAAuB,SAAC5G,GAC5B,IAAM6G,EAAY7G,EAAM8G,cAAcC,QAAQpH,GAEzCoF,GAAW8B,GAAahD,EAAagD,GACtC9B,IAAcE,GAAY4B,GAAa9C,EAAc8C,IAG3D,OACE,kBAACG,EAAA,EAAD,CAAgBhJ,UAAWP,EAAQ0I,eAAgBc,UAAWlB,KAC5D,kBAACmB,EAAA,EAAD,CAAO7I,aAAW,gBAChB,kBAAC8I,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACErJ,UAAWP,EAAQ2I,UACnBkB,MAAM,SACNC,KAAK,SAHP,4EAOA,kBAACF,EAAA,EAAD,CACErJ,UAAWP,EAAQ2I,UACnBkB,MAAM,SACNC,KAAK,SAHP,8BAOA,kBAACF,EAAA,EAAD,CACErJ,UAAWP,EAAQ2I,UACnBkB,MAAM,SACNC,KAAK,SAHP,yFASJ,kBAACC,EAAA,EAAD,KACGpI,GACCA,EAAMwB,KAAI,SAACC,GAAD,OACR,kBAACuG,EAAA,EAAD,CACErG,IAAKF,EAAIlB,GACT8H,UAAS5G,EAAIlB,GACb+H,OAAK,EACLC,KAAK,WACLC,UAAW,EACX3B,QAASW,GAET,kBAACS,EAAA,EAAD,CACEJ,UAAU,KACVY,MAAM,MACNP,MAAM,SACNC,KAAK,SAEL,yBAAKvJ,UAAWP,EAAQyB,aACtB,yBACE8B,IAAKC,gCAAsCJ,EAAIK,SAC/CC,IAAI,GACJC,MAAO,CAAE1C,OAAQ,OAAQxB,YAAa,SAEvC2D,EAAIQ,WAGT,kBAACgG,EAAA,EAAD,CACErJ,WAvEM8B,EAuEkBe,EAAI4B,cAtEtC3C,EAAQ,EACHrC,EAAQgJ,oBAEb3G,EAAQ,EACHrC,EAAQiJ,uBADjB,GAoEcY,MAAM,SACNC,KAAK,SAEJO,KAAKC,MAAMlH,EAAI0B,QAElB,kBAAC8E,EAAA,EAAD,CAAWC,MAAM,SAASC,KAAK,SAC5BO,KAAKC,MAAMlH,EAAI2B,gBA9EX,IAAC1C,SG3CTkI,GCIY,WACzB,MCH2B,WAC3B,IAAQ/D,EAAeI,IAAfJ,WAER,OAAOY,aAAY,iBAAO,CACxBzF,MAAO6E,EAAW7E,MAClB6I,OAAQhE,EAAWgE,OACnBvG,iBAAkBuC,EAAWvC,iBAC7BE,cAAeqC,EAAWrC,kBDJKkD,GAAzB1F,EAAR,EAAQA,MAAOwC,EAAf,EAAeA,cAEf,EAAwBsG,mBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAeA,OAbAhD,qBAAU,WACR,IAAMiD,EAAQC,YAAW,WACvBF,EAAQD,EAAO,KACd,KACH,OAAO,WACLI,aAAaF,MAEd,CAACF,IAEJ/C,qBAAU,WACRxD,MACC,CAACuG,IAGF,kBAACzK,EAAA,EAAD,CAAMC,IAAE,EAACC,QAAS,KAChB,kBAACmI,EAAA,EAAD,CAAOhI,UAAW,EAAGqD,MAAO,CAAE1C,OAAQ,OAAQ8J,WAAY,SACxD,kBAAClK,EAAA,EAAD,CAAY8C,MAAO,CAAEqH,WAAY,QAAUlK,QAAQ,MAAnD,qGAGA,kBAAC,GAAD,CAAaa,MAAOA,O,mBE5BbsJ,GCMC,WACd,IAAM5L,EAAQ6L,YAAY,CACxBtC,QAAS,CACPC,QAAS,CACPC,KAAMqC,KAAO,MAEfC,UAAW,CACTtC,KAAMuC,KAAK,SAKjB,OACE,kBAACC,EAAA,EAAD,CAAejM,MAAOA,GACpB,kBAAC,EAAD,MACA,kBAACkM,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAMC,WAAS,EAAChM,QAAS,EAAGiE,MAAO,CAAE9D,UAAW,SAC9C,kBAAC4L,EAAA,EAAD,CAAMxD,MAAI,EAAC0D,GAAI,GAAIC,GAAI,GACrB,kBAAC,EAAD,OAEF,kBAACH,EAAA,EAAD,CAAMxD,MAAI,EAAC0D,GAAI,GAAIC,GAAI,GACrB,kBAAC,GAAD,W,OCtBZC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.8e998e8c.chunk.js","sourcesContent":["export type TCoin = {\n  id: string;\n  name: string;\n  fullName: string;\n  imageUrl: string;\n  price: number;\n  volume24Hour: number;\n  Changepcthour: number;\n};\n\nexport enum EStatus {\n  WAITING = \"waiting\",\n  LOADING = \"loading\",\n  ERROR = \"error\",\n}\n","import React, { FC } from \"react\";\nimport {\n  AppBar,\n  Button,\n  Fade,\n  IconButton,\n  makeStyles,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  toolbar: {\n    marginTop: \"5px\",\n    background: \"#FFFFFF\",\n  },\n}));\n\nconst AppMenu: FC = () => {\n  const classes = useStyles();\n\n  return (\n    <Fade in timeout={1000}>\n      <AppBar position=\"static\" elevation={1} className={classes.toolbar}>\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"primary\"\n            aria-label=\"menu\"\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography color=\"primary\" variant=\"h6\" className={classes.title}>\n            CryptoVizor\n          </Typography>\n          <Button color=\"primary\">Login</Button>\n        </Toolbar>\n      </AppBar>\n    </Fade>\n  );\n};\n\nexport default AppMenu;\n","import AppMenu from \"./AppMenu\";\n\nexport default AppMenu;\n","import React, { FC } from \"react\";\nimport {\n  FormControl,\n  InputLabel,\n  makeStyles,\n  MenuItem,\n  Select,\n  TextField,\n} from \"@material-ui/core\";\n\nimport { TCoin } from \"../../interfaces/TCoin\";\n\nconst useStyles = makeStyles((theme) => ({\n  inputGroup: {\n    height: \"40px\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"flex-end\",\n  },\n  input: { width: \"45%\" },\n  formControl: {\n    width: \"45%\",\n  },\n  selectEmpty: {\n    marginTop: theme.spacing(2),\n  },\n  coinWrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n}));\n\ninterface InputGroupProps {\n  coins: TCoin[] | null;\n  selectValue: string;\n  setSelectValue: (value: string) => void;\n  inputValue: number;\n  setInputValue: (value: number) => void;\n  readOnly?: boolean;\n}\n\nconst InputGroup: FC<InputGroupProps> = ({\n  coins,\n  selectValue,\n  setSelectValue,\n  inputValue,\n  setInputValue,\n  readOnly = false,\n}) => {\n  const classes = useStyles();\n\n  const handleSelectChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    setSelectValue(event.target.value as string);\n  };\n\n  const handleInputChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    const inputValue = parseFloat(event.target.value as string);\n\n    setInputValue(inputValue);\n  };\n\n  return (\n    <div className={classes.inputGroup}>\n      <TextField\n        id=\"cryptoInput\"\n        type=\"number\"\n        label=\"Сумма\"\n        className={classes.input}\n        value={inputValue}\n        onChange={handleInputChange}\n        inputProps={{ type: \"number\", step: \"any\", min: 0 }}\n        InputProps={{\n          readOnly: readOnly,\n        }}\n      />\n\n      <FormControl className={classes.formControl}>\n        <InputLabel id=\"select-label\">Валюта</InputLabel>\n        <Select\n          labelId=\"select-label\"\n          id=\"crYptoSelect\"\n          value={selectValue}\n          onChange={handleSelectChange}\n          fullWidth\n        >\n          {coins &&\n            coins.map((row) => (\n              <MenuItem key={row.id} value={row.id}>\n                <div className={classes.coinWrapper}>\n                  <img\n                    src={process.env.REACT_APP_ICON_BASE_URL + row.imageUrl}\n                    alt=\"\"\n                    style={{ height: \"25px\", marginRight: \"5px\" }}\n                  />\n                  {row.fullName}\n                </div>\n              </MenuItem>\n            ))}\n        </Select>\n      </FormControl>\n    </div>\n  );\n};\n\nexport default InputGroup;\n","import InputGroup from \"./InputGroup\";\n\nexport default InputGroup;\n","import { makeAutoObservable } from \"mobx\";\nimport Axios from \"axios\";\n\nimport { EStatus, TCoin } from \"../interfaces/TCoin\";\n\nclass CoinsStore {\n  _coins: TCoin[] | null = null;\n  _status: EStatus = EStatus.WAITING;\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  get coins(): TCoin[] | null {\n    return this._coins;\n  }\n\n  get status(): EStatus {\n    return this._status;\n  }\n\n  setStatusWaiting = (): void => {\n    this._status = EStatus.WAITING;\n  };\n\n  setCoins = (coins: TCoin[]): void => {\n    this._coins = coins;\n  };\n\n  loadCoinsData = (): void => {\n    this._status = EStatus.LOADING;\n\n    Axios.get(process.env.REACT_APP_BASE_URL + \"\")\n      .then((response) => {\n        const coins: TCoin[] = response.data.Data.map((coin: any) => {\n          const obj: TCoin = {\n            id: \"\",\n            name: \"\",\n            fullName: \"\",\n            imageUrl: \"\",\n            price: 0,\n            volume24Hour: 0,\n            Changepcthour: 0,\n          };\n\n          obj.id = coin.CoinInfo.Id;\n          obj.name = coin.CoinInfo.Name;\n          obj.fullName = coin.CoinInfo.FullName;\n          obj.imageUrl = coin.CoinInfo.ImageUrl;\n          obj.price = coin.RAW.USD.PRICE;\n          obj.volume24Hour = coin.RAW.USD.VOLUME24HOUR;\n          obj.Changepcthour = coin.RAW.USD.CHANGEPCTHOUR;\n\n          return obj;\n        });\n\n        this.setStatusWaiting();\n        this.setCoins(coins);\n      })\n      .catch(() => {\n        this._status = EStatus.ERROR;\n      });\n  };\n}\n\nexport default CoinsStore;\n","import { makeAutoObservable } from \"mobx\";\n\nclass RateExchangerStore {\n  private _selectValue1: string = \"\";\n  private _inputValue1: number = 0;\n\n  private _selectValue2: string = \"\";\n  private _inputValue2: number = 0;\n\n  constructor() {\n    makeAutoObservable(this);\n  }\n\n  get firstCoin(): string {\n    return this._selectValue1;\n  }\n  get firstValue(): number {\n    return this._inputValue1;\n  }\n  setFirstCoin = (value: string): void => {\n    this._selectValue1 = value;\n  };\n  setFirstValue = (value: number): void => {\n    this._inputValue1 = value;\n  };\n\n  get secondCoin(): string {\n    return this._selectValue2;\n  }\n  get secondValue(): number {\n    return this._inputValue2;\n  }\n  setSecondCoin = (value: string): void => {\n    this._selectValue2 = value;\n  };\n  setSecondValue = (value: number): void => {\n    this._inputValue2 = value;\n  };\n}\n\nexport default RateExchangerStore;\n","import { createContext } from \"react\";\n\nimport CoinsStore from \"../store/CoinsStore\";\nimport RateExchangerStore from \"./RateExchangerStore\";\n\nconst coinsStore = new CoinsStore();\nconst rateExchangerStore = new RateExchangerStore();\n\nexport const RootContext = createContext({\n  coinsStore,\n  rateExchangerStore,\n});\n","import { useContext } from \"react\";\n\nimport { RootContext } from \"./RootStore\";\n\nconst useStores = () => useContext(RootContext);\n\nexport default useStores;\n","import React, { FC, useEffect } from \"react\";\nimport {\n  Fade,\n  IconButton,\n  makeStyles,\n  Paper,\n  Typography,\n} from \"@material-ui/core\";\nimport ImportExportIcon from \"@material-ui/icons/ImportExport\";\n\nimport InputGroup from \"../InputGroup\";\nimport { useCoinsStore, useRateExchangerStore } from \"./hooks\";\nimport { TCoin } from \"../../interfaces/TCoin\";\n\nconst useStyles = makeStyles((theme) => ({\n  rateContainer: {\n    display: \"grid\",\n    gridAutoColumns: \"1fr\",\n    gridAutoRows: \"80px 60px 30px\",\n    alignItems: \"end\",\n  },\n  iconButton: {\n    justifySelf: \"center\",\n  },\n}));\n\nconst RateExchanger: FC = () => {\n  const classes = useStyles();\n\n  const { coins } = useCoinsStore();\n  const {\n    firstCoin,\n    firstValue,\n    setFirstCoin,\n    setFirstValue,\n\n    secondCoin,\n    secondValue,\n    setSecondCoin,\n    setSecondValue,\n  } = useRateExchangerStore();\n\n  const changeButtonClickHandler = () => {\n    const tmpCoin = firstCoin;\n\n    setFirstCoin(secondCoin);\n    setSecondCoin(tmpCoin);\n  };\n\n  const exchange = (\n    coins: TCoin[] | null,\n    fValue: number,\n    fId: string,\n    sId: string,\n    setSecondValue: (value: number) => void\n  ): void => {\n    if (coins && fId && sId)\n      if (coins !== null) {\n        const fPrice = coins.filter((item) => item.id === fId)[0].price;\n        const sPrice = coins.filter((item) => item.id === sId)[0].price;\n        const multiplier = parseFloat((fPrice / sPrice).toFixed(5));\n\n        setSecondValue(parseFloat((fValue * multiplier).toFixed(5)));\n      }\n  };\n\n  useEffect(() => {\n    exchange(coins, firstValue, firstCoin, secondCoin, setSecondValue);\n  }, [firstCoin, firstValue, secondCoin, secondValue]);\n\n  return (\n    <Fade in timeout={1000}>\n      <Paper elevation={1} style={{ height: \"300px\", padding: \"13px\" }}>\n        <Typography variant=\"h5\">Калькулятор</Typography>\n        <div className={classes.rateContainer}>\n          <InputGroup\n            coins={coins}\n            selectValue={firstCoin}\n            setSelectValue={setFirstCoin}\n            inputValue={firstValue}\n            setInputValue={setFirstValue}\n          />\n          <IconButton\n            className={classes.iconButton}\n            color=\"primary\"\n            aria-label=\"change\"\n            onClick={changeButtonClickHandler}\n          >\n            <ImportExportIcon />\n          </IconButton>\n          <InputGroup\n            coins={coins}\n            selectValue={secondCoin}\n            setSelectValue={setSecondCoin}\n            inputValue={secondValue}\n            setInputValue={setSecondValue}\n            readOnly\n          />\n        </div>\n      </Paper>\n    </Fade>\n  );\n};\n\nexport default RateExchanger;\n","import RateExchanger from \"./RateExchanger\";\n\nexport default RateExchanger;\n","import { useObserver } from \"mobx-react-lite\";\n\nimport useStores from \"../../store/useStores\";\n\nexport const useRateExchangerStore = () => {\n  const { rateExchangerStore } = useStores();\n\n  return useObserver(() => ({\n    firstCoin: rateExchangerStore.firstCoin,\n    firstValue: rateExchangerStore.firstValue,\n    setFirstCoin: rateExchangerStore.setFirstCoin,\n    setFirstValue: rateExchangerStore.setFirstValue,\n\n    secondCoin: rateExchangerStore.secondCoin,\n    secondValue: rateExchangerStore.secondValue,\n    setSecondCoin: rateExchangerStore.setSecondCoin,\n    setSecondValue: rateExchangerStore.setSecondValue,\n  }));\n};\n\nexport const useCoinsStore = () => {\n  const { coinsStore } = useStores();\n\n  return useObserver(() => ({\n    coins: coinsStore.coins,\n  }));\n};\n","import React, { FC } from \"react\";\nimport {\n  Paper,\n  makeStyles,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from \"@material-ui/core\";\n\nimport { TCoin } from \"../../interfaces/TCoin\";\nimport { useRateExchangerStore } from \"./hooks\";\n\nconst useStyles = makeStyles((theme) => ({\n  tableContainer: {\n    marginTop: \"13px\",\n  },\n  tableHead: {\n    color: theme.palette.primary.main,\n    backgroundColor: \"#e9e9e9\",\n  },\n  coinWrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  colorСellGreen: {\n    backgroundColor: \"#d8ffc4\",\n  },\n  colorСellRed: {\n    backgroundColor: \"#ffdada\",\n  },\n}));\n\ninterface CryptoTableProps {\n  coins: TCoin[] | null;\n}\n\nconst CryptoTable: FC<CryptoTableProps> = ({ coins }) => {\n  const classes = useStyles();\n\n  const { firstCoin, setFirstCoin, secondCoin, setSecondCoin } =\n    useRateExchangerStore();\n\n  const setCellColor = (value: number) => {\n    if (value > 0) {\n      return classes.colorСellGreen;\n    }\n    if (value < 0) {\n      return classes.colorСellRed;\n    }\n  };\n\n  const tableRowClickHandler = (event: React.MouseEvent<HTMLElement>) => {\n    const elementId = event.currentTarget.dataset.id;\n\n    if (!firstCoin) elementId && setFirstCoin(elementId);\n    if (firstCoin && !secondCoin) elementId && setSecondCoin(elementId);\n  };\n\n  return (\n    <TableContainer className={classes.tableContainer} component={Paper}>\n      <Table aria-label=\"crypto table\">\n        <TableHead>\n          <TableRow>\n            <TableCell\n              className={classes.tableHead}\n              align=\"center\"\n              size=\"small\"\n            >\n              Криптовалюта\n            </TableCell>\n            <TableCell\n              className={classes.tableHead}\n              align=\"center\"\n              size=\"small\"\n            >\n              Цена $\n            </TableCell>\n            <TableCell\n              className={classes.tableHead}\n              align=\"center\"\n              size=\"small\"\n            >\n              Куплено за 24 часа\n            </TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {coins &&\n            coins.map((row) => (\n              <TableRow\n                key={row.id}\n                data-id={row.id}\n                hover\n                role=\"checkbox\"\n                tabIndex={-1}\n                onClick={tableRowClickHandler}\n              >\n                <TableCell\n                  component=\"th\"\n                  scope=\"row\"\n                  align=\"center\"\n                  size=\"small\"\n                >\n                  <div className={classes.coinWrapper}>\n                    <img\n                      src={process.env.REACT_APP_ICON_BASE_URL + row.imageUrl}\n                      alt=\"\"\n                      style={{ height: \"31px\", marginRight: \"5px\" }}\n                    />\n                    {row.fullName}\n                  </div>\n                </TableCell>\n                <TableCell\n                  className={setCellColor(row.Changepcthour)}\n                  align=\"center\"\n                  size=\"small\"\n                >\n                  {Math.round(row.price)}\n                </TableCell>\n                <TableCell align=\"center\" size=\"small\">\n                  {Math.round(row.volume24Hour)}\n                </TableCell>\n              </TableRow>\n            ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n\nexport default CryptoTable;\n","import CryptoTable from \"./CryptoTable\";\n\nexport default CryptoTable;\n","import { useObserver } from \"mobx-react-lite\";\n\nimport useStores from \"../../store/useStores\";\n\nexport const useRateExchangerStore = () => {\n  const { rateExchangerStore } = useStores();\n\n  return useObserver(() => ({\n    firstCoin: rateExchangerStore.firstCoin,\n    firstValue: rateExchangerStore.firstValue,\n    setFirstCoin: rateExchangerStore.setFirstCoin,\n    setFirstValue: rateExchangerStore.setFirstValue,\n\n    secondCoin: rateExchangerStore.secondCoin,\n    secondValue: rateExchangerStore.secondValue,\n    setSecondCoin: rateExchangerStore.setSecondCoin,\n    setSecondValue: rateExchangerStore.setSecondValue,\n  }));\n};\n","import CryptoCurrency from \"./CryptoCurrency\";\n\nexport default CryptoCurrency;\n","import React, { FC, useEffect, useState } from \"react\";\nimport { Fade, Paper, Typography } from \"@material-ui/core\";\n\nimport CryptoTable from \"../CryptoTable\";\nimport { useCoinsStore } from \"./hooks\";\n\nconst CryptoCurrency: FC = () => {\n  const { coins, loadCoinsData } = useCoinsStore();\n\n  const [time, setTime] = useState(0);\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setTime(time + 1);\n    }, 30000);\n    return () => {\n      clearTimeout(timer);\n    };\n  }, [time]);\n\n  useEffect(() => {\n    loadCoinsData();\n  }, [time]);\n\n  return (\n    <Fade in timeout={1000}>\n      <Paper elevation={1} style={{ height: \"auto\", paddingTop: \"13px\" }}>\n        <Typography style={{ marginLeft: \"13px\" }} variant=\"h5\">\n          Курсы криптовалют\n        </Typography>\n        <CryptoTable coins={coins} />\n      </Paper>\n    </Fade>\n  );\n};\n\nexport default CryptoCurrency;\n","import { useObserver } from \"mobx-react-lite\";\n\nimport useStores from \"../../store/useStores\";\n\nexport const useCoinsStore = () => {\n  const { coinsStore } = useStores();\n\n  return useObserver(() => ({\n    coins: coinsStore.coins,\n    status: coinsStore.status,\n    setStatusWaiting: coinsStore.setStatusWaiting,\n    loadCoinsData: coinsStore.loadCoinsData,\n  }));\n};\n","import App from \"./App\";\n\nexport default App;\n","import React, { FC } from \"react\";\nimport { Container, createTheme, Grid, ThemeProvider } from \"@material-ui/core\";\n\nimport AppMenu from \"../components/AppMenu\";\nimport RateExchanger from \"../components/RateExchanger\";\nimport CryptoCurrency from \"../components/CryptoCurrency\";\nimport { grey, purple } from \"@material-ui/core/colors\";\n\nconst App: FC = () => {\n  const theme = createTheme({\n    palette: {\n      primary: {\n        main: purple[500],\n      },\n      secondary: {\n        main: grey[100],\n      },\n    },\n  });\n\n  return (\n    <ThemeProvider theme={theme}>\n      <AppMenu />\n      <Container maxWidth=\"lg\">\n        <Grid container spacing={1} style={{ marginTop: \"10px\" }}>\n          <Grid item xs={12} md={5}>\n            <RateExchanger />\n          </Grid>\n          <Grid item xs={12} md={7}>\n            <CryptoCurrency />\n          </Grid>\n        </Grid>\n      </Container>\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}